<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hukx</title>
        <link>https://hukx.site/</link>
        <description>Recent content on Hukx</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh</language>
        <copyright>Hukx - All rights reserved</copyright>
        <lastBuildDate>Sat, 20 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hukx.site/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>图解 Kubernetes 架构</title>
        <link>https://hukx.site/posts/brief-intro-to-arch-of-k8s-with-pictures/</link>
        <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://hukx.site/posts/brief-intro-to-arch-of-k8s-with-pictures/</guid>
        <description>&lt;img src="https://hukx.site/posts/brief-intro-to-arch-of-k8s-with-pictures/2021-02-20-10-43-16.png" alt="Featured image of post 图解 Kubernetes 架构" /&gt;&lt;h3 id=&#34;0-架构图&#34;&gt;0. 架构图&lt;/h3&gt;
&lt;p&gt;Kubernetes 组件整体架构如下图
&lt;figure style=&#34;flex-grow: 152; flex-basis: 366px&#34;&gt;
		&lt;a href=&#34;https://hukx.site/posts/brief-intro-to-arch-of-k8s-with-pictures/2021-02-20-10-43-16.png&#34; data-size=&#34;1499x982&#34;&gt;&lt;img src=&#34;https://hukx.site/posts/brief-intro-to-arch-of-k8s-with-pictures/2021-02-20-10-43-16.png&#34;
				srcset=&#34;https://hukx.site/posts/brief-intro-to-arch-of-k8s-with-pictures/2021-02-20-10-43-16_hu5d7990e807ce1f891ff764525f98dfaf_448463_480x0_resize_box_2.png 480w, https://hukx.site/posts/brief-intro-to-arch-of-k8s-with-pictures/2021-02-20-10-43-16_hu5d7990e807ce1f891ff764525f98dfaf_448463_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1499&#34;
				height=&#34;982&#34;
				loading=&#34;lazy&#34;
				&gt;
		&lt;/a&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-控制面组件&#34;&gt;1. 控制面组件&lt;/h3&gt;
&lt;h4 id=&#34;11-kube-apiserver&#34;&gt;1.1 kube-apiserver&lt;/h4&gt;
&lt;p&gt;API server 是用于暴露 K8s API 的控制面组件，是控制面的前端端点  &lt;br&gt;
主要实现是 &lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/reference/generated/kube-apiserver/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kube-apiserver&lt;/a&gt;。kube-apiserver 可横向扩展&lt;/p&gt;
&lt;h4 id=&#34;12-etcd&#34;&gt;1.2 etcd&lt;/h4&gt;
&lt;p&gt;一致性高可用 kv 存储，用作 K8s 集群数据的后备存储 &lt;br&gt;
有关 etcd 的更多信息参阅&lt;a class=&#34;link&#34; href=&#34;https://etcd.io/docs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;13-kube-scheduler&#34;&gt;1.3 kube-scheduler&lt;/h4&gt;
&lt;p&gt;用于给新创建的 Pods 分配 node 的控制面组件  &lt;br&gt;
影响调度策略的因素包括：局部及整体的资源需求、硬件/软件/策略 限制、亲和性及反亲和性声明、数据位置、workload 间的干扰性及 deadlines&lt;/p&gt;
&lt;h4 id=&#34;14-kube-controller-manager&#34;&gt;1.4 kube-controller-manager&lt;/h4&gt;
&lt;p&gt;运行 controller 进程的控制面组件  &lt;br&gt;
每个 controller 逻辑上是独立的，但为了降低复杂性，他们是被编译成一个二进制文件运行在同一个进程的  &lt;br&gt;
这些 controller 包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点控制器（Node controller）：负责在节点发生故障时的通知和响应&lt;/li&gt;
&lt;li&gt;副本控制器（Replication controller）：为系统中所有副本控制器对象维持正确数量的 pods&lt;/li&gt;
&lt;li&gt;端点控制器（Endpoints controller）：填充端点（Endpoints）对象（加入 Service 与 Pod）&lt;/li&gt;
&lt;li&gt;服务账户和令牌控制器（Service Account &amp;amp; Token controllers）：为新的命名空间创建默认账户和 API 访问 token&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;15-cloud-controller-manager可选组件&#34;&gt;1.5 cloud-controller-manager(可选组件)&lt;/h4&gt;
&lt;p&gt;是接入特定云的控制逻辑的控制面组件    &lt;br&gt;
如下列控制器包含对云平台驱动的依赖：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点控制器（Node Controller）: 用于在节点终止响应后检查云提供商以确定节点是否已被删除&lt;/li&gt;
&lt;li&gt;路由控制器（Route Controller）: 用于在底层云基础架构中设置路由&lt;/li&gt;
&lt;li&gt;服务控制器（Service Controller）: 用于创建、更新和删除云提供商负载均衡器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-node-组件&#34;&gt;2. Node 组件&lt;/h3&gt;
&lt;h4 id=&#34;21-kubelet&#34;&gt;2.1 kubelet&lt;/h4&gt;
&lt;p&gt;运行在集群每个节点上的一个 agent，用于确保 containers 运行在 pod 中 &lt;br&gt;
kubelet 根据提供的 PodSpecs 确保 containers 按期望的 PodSpecs 正常地运行。它不会管理不是通过 K8s 创建的容器&lt;/p&gt;
&lt;h4 id=&#34;22-kube-proxy&#34;&gt;2.2 kube-proxy&lt;/h4&gt;
&lt;p&gt;运行在集群每个节点上的网络代理，实现了 K8s Service 的部分概念  &lt;br&gt;
kube-proxy 维护节点上的网络规则，这些规则允许从集群内部及外部与当前节点上的 Pod 的进行通信 &lt;br&gt;
如果操作系统有网络包过滤层且可用的话，kube-proxy 会通过它来实现网络规则，否则 kube-proxy 自身会转发流量&lt;/p&gt;
&lt;h4 id=&#34;23-container-runtime&#34;&gt;2.3 Container runtime&lt;/h4&gt;
&lt;p&gt;容器运行时（the container runtime）是一个负责运行 container 的软件  &lt;br&gt;
K8s 支持多种容器运行时：Docker、containerd、CRI-O 及 任何 &lt;a class=&#34;link&#34; href=&#34;https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kubernetes CRI(Container Runtime Interface)&lt;/a&gt;的实现&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/components/&#34;&gt;https://kubernetes.io/docs/concepts/overview/components/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/&#34;&gt;https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://draveness.me/understanding-kubernetes/&#34;&gt;https://draveness.me/understanding-kubernetes/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>图解 Kubernetes 网络</title>
        <link>https://hukx.site/posts/brief-intro-to-networking-of-k8s-with-pictures/</link>
        <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://hukx.site/posts/brief-intro-to-networking-of-k8s-with-pictures/</guid>
        <description>&lt;img src="https://hukx.site/posts/brief-intro-to-networking-of-k8s-with-pictures/network.jpg" alt="Featured image of post 图解 Kubernetes 网络" /&gt;&lt;h3 id=&#34;docker-networking&#34;&gt;Docker Networking&lt;/h3&gt;
&lt;p&gt;让我们先大致了解下 Docker Networking &lt;br&gt;
默认 bridge 模式 &lt;br&gt;
&lt;img src=&#34;./docker-bridge.png&#34; alt=&#34;docker bridge mode&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;通常 Docker 只负责当前同一 host/node 下的容器通信，不去暴露 container ip 给其他 host/node &lt;br&gt;
K8s 解决的问题之一就是不同 host/node 间的容器通信问题&lt;/p&gt;
&lt;h3 id=&#34;ip-in-kubernetes&#34;&gt;IP in Kubernetes&lt;/h3&gt;
&lt;p&gt;下面大概介绍下 K8s 中的三大类 IP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;node IP&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;节点 IP，每个 K8s 节点都需要有一个 IP 地址&lt;/li&gt;
&lt;li&gt;其实不属于 K8s 管理的范畴，通过其他方式分配，如：DHCP、手动配置、云厂商分配等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pod IP&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一个 pod 里的多个 containers 共享同一个 network namespace&lt;/li&gt;
&lt;li&gt;每个 pod 会被分配 IP 地址，通过你当前使用的 CNI(Container Network Interface) 插件的 IPAM 功能分配
&lt;ul&gt;
&lt;li&gt;最基本的方式是通过给每个 node 分配一段 IP 地址段，node 再在这个地址段中分配 IP 给其上的 pod&lt;/li&gt;
&lt;li&gt;有些插件会动态分配 IP 段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kube-apiserver 通过启动参数 &lt;code&gt;--cluster-cidr=172.16.0.0.0/16&lt;/code&gt; 来决定所有 pod 的 IP 地址段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;service IP&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;K8s service 是对一组 pod 的一个抽象&lt;/li&gt;
&lt;li&gt;所有 non-headless service 都有一个 ClusterIP&lt;/li&gt;
&lt;li&gt;kube-apiserver 通过参数 &lt;code&gt;--service-cluster-ip-range=172.15.100.0/23&lt;/code&gt; 来决定 ClusterIPs 的 IP 池&lt;/li&gt;
&lt;li&gt;通过 apiserver 组件管理分配，告诉 kubelet 进程 serives 与 IP 的映射关系，及 serivce 对应的 endpoints IP（如对应 pod 的 IP）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上三者关系如图&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 103; flex-basis: 249px&#34;&gt;
		&lt;a href=&#34;https://hukx.site/posts/brief-intro-to-networking-of-k8s-with-pictures/2021-02-20-10-34-31.png&#34; data-size=&#34;829x798&#34;&gt;&lt;img src=&#34;https://hukx.site/posts/brief-intro-to-networking-of-k8s-with-pictures/2021-02-20-10-34-31.png&#34;
				srcset=&#34;https://hukx.site/posts/brief-intro-to-networking-of-k8s-with-pictures/2021-02-20-10-34-31_huce1929c0f3841b162f1c5b7be7578eac_216161_480x0_resize_box_2.png 480w, https://hukx.site/posts/brief-intro-to-networking-of-k8s-with-pictures/2021-02-20-10-34-31_huce1929c0f3841b162f1c5b7be7578eac_216161_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;829&#34;
				height=&#34;798&#34;
				loading=&#34;lazy&#34;
				&gt;
		&lt;/a&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;cni&#34;&gt;CNI&lt;/h3&gt;
&lt;h4 id=&#34;flannel&#34;&gt;Flannel&lt;/h4&gt;
&lt;p&gt;Flannel 是早期的网络插件之一，适合小的 K8s 集群。运行在 OSI 网络模型的第二层数据链路层（Ethernet）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IPAM&lt;/strong&gt; &lt;br&gt;
Flannel 分配静态 IP 网段到 K8s Node，K8s Node 从分配到的网段再分配 IP 给 pod&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation 封包&lt;/strong&gt;   &lt;br&gt;
默认封包策略是 &lt;em&gt;VXLAN&lt;/em&gt;（将 2 层以太网包封装到 UDP 包内）&lt;/p&gt;
&lt;h4 id=&#34;calico&#34;&gt;Calico&lt;/h4&gt;
&lt;p&gt;Calico 运行在 OSI 网络模型的第三层网络层（IP），因此只有 IP 流量会被能被封装，and everything is routed&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IPAM&lt;/strong&gt;   &lt;br&gt;
Calico 使用 K8s API server 或者自己的 etcd cluster 集群来实现了动态的网段划分&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation 封包&lt;/strong&gt;
Calico 默认的封包策略是 “IP-in-IP”(将 3 层的 IP 包添加额外的 IP 头形成一个新的 IP 包)，开销很小，但只能封装 IP 包&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/InZVNuKY5GY&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tutorial: Communication Is Key - Understanding Kubernetes Networking - Jeff Poole, Vivint Smart Home&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Django ORM 剖析</title>
        <link>https://hukx.site/posts/description-of-django-orm/</link>
        <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
        
        <guid>https://hukx.site/posts/description-of-django-orm/</guid>
        <description>&lt;img src="https://hukx.site/posts/description-of-django-orm/orm.png" alt="Featured image of post Django ORM 剖析" /&gt;&lt;h3 id=&#34;orm实现组成&#34;&gt;ORM实现组成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Model&lt;/li&gt;
&lt;li&gt;Manager&lt;/li&gt;
&lt;li&gt;QuerySet&lt;/li&gt;
&lt;li&gt;Query&lt;/li&gt;
&lt;li&gt;SQLCompiler&lt;/li&gt;
&lt;li&gt;Database backend&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;database-backends&#34;&gt;DATABASE BACKENDS&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;基类实现及支持的数据库的各自实现（django/db/models/backends）&lt;/li&gt;
&lt;li&gt;具体采用的是哪种实现依据数据库配置里面的ENGINE&lt;/li&gt;
&lt;li&gt;ORM的底层行为的实现&lt;/li&gt;
&lt;li&gt;介于Django与DB driver模块之间&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;databasewrapper&#34;&gt;Databasewrapper&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;django.db.backends.base.BaseDatabasewrapper，其他数据库的实现继承自该类，代表一条数据库连接&lt;/li&gt;
&lt;li&gt;实现以下内容：
&lt;ul&gt;
&lt;li&gt;connection管理、cursor管理&lt;/li&gt;
&lt;li&gt;事务管理&lt;/li&gt;
&lt;li&gt;定义当前数据库类型下，Django field与column type的对应映射关系，Django operators与SQL之间的映射&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;databaseoperations&#34;&gt;DatabaseOperations&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;django.db.backends.base.operations.BaseDatabaseOperations, 封装不同数据库的不同SQL表达
eg:
mysql
&lt;figure style=&#34;flex-grow: 163; flex-basis: 392px&#34;&gt;
		&lt;a href=&#34;https://hukx.site/posts/description-of-django-orm/2018-10-08-11-48-04.png&#34; data-size=&#34;532x325&#34;&gt;&lt;img src=&#34;https://hukx.site/posts/description-of-django-orm/2018-10-08-11-48-04.png&#34;
				srcset=&#34;https://hukx.site/posts/description-of-django-orm/2018-10-08-11-48-04_hu3f87c5642ecdc132738265900521927d_100735_480x0_resize_box_2.png 480w, https://hukx.site/posts/description-of-django-orm/2018-10-08-11-48-04_hu3f87c5642ecdc132738265900521927d_100735_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;532&#34;
				height=&#34;325&#34;
				loading=&#34;lazy&#34;
				&gt;
		&lt;/a&gt;
		
	&lt;/figure&gt;
oracle
&lt;figure style=&#34;flex-grow: 232; flex-basis: 558px&#34;&gt;
		&lt;a href=&#34;https://hukx.site/posts/description-of-django-orm/2018-10-08-11-48-44.png&#34; data-size=&#34;591x254&#34;&gt;&lt;img src=&#34;https://hukx.site/posts/description-of-django-orm/2018-10-08-11-48-44.png&#34;
				srcset=&#34;https://hukx.site/posts/description-of-django-orm/2018-10-08-11-48-44_hue840388dd32337ff4184dc66e18a0e73_73736_480x0_resize_box_2.png 480w, https://hukx.site/posts/description-of-django-orm/2018-10-08-11-48-44_hue840388dd32337ff4184dc66e18a0e73_73736_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;591&#34;
				height=&#34;254&#34;
				loading=&#34;lazy&#34;
				&gt;
		&lt;/a&gt;
		
	&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;sql to flushes / sequence resets&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;databasefeatures&#34;&gt;DatabaseFeatures&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;django.db.backends.base.features.BaseDatabaseFeatures 当前数据库支持的操作&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;databasecreation&#34;&gt;DatabaseCreation&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;django.db.backends.creation.BaseDatabaseCreation  Encapsulate backend-specific differences pertaining to creation and destruction of the test database.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;databaseintrospection&#34;&gt;DatabaseIntrospection&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;django.db.backends.introspection.BaseDatabaseIntrospection&lt;/li&gt;
&lt;li&gt;inspectdb命令的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;databaseschemaeditor&#34;&gt;DatabaseSchemaEditor&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;django.db.backends.base.schema.BaseDatabaseSchemaEditor&lt;/li&gt;
&lt;li&gt;用来做migrations&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;databaseclient&#34;&gt;DatabaseClient&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;django.db.backends.base.client.BaseDatabaseClient&lt;/li&gt;
&lt;li&gt;dbshell命令的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sqlcompiler&#34;&gt;SQLCompiler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;django.db.models.sql.compiler.SQLCompiler&lt;/li&gt;
&lt;li&gt;将Django Query实例转化为SQL&lt;/li&gt;
&lt;li&gt;SQLInsertCompiler/SQLDeleteCompliler/SQLUpdateCompiler/SQLAggregateCompiler&lt;/li&gt;
&lt;li&gt;Query.get_compiler() -&amp;gt; 调用DatabaseOperations.compiler() -&amp;gt; 通过DatabaseOperations.compiler_module找到SQLCompiler类 ==&amp;gt; 为该Query返回一个SQLCompiler实例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;query&#34;&gt;Query&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;django.db.models.sql.query&lt;/li&gt;
&lt;li&gt;分为Query(普通ORM操作) / RawQuery(raw())&lt;/li&gt;
&lt;li&gt;包含与query相关的属性&lt;/li&gt;
&lt;li&gt;包含select/tables/where/group_by/order_by/aggregates等&lt;/li&gt;
&lt;li&gt;as_sql，生成SQL(self.get_compiler(connection=connection).as_sql())&lt;/li&gt;
&lt;li&gt;query是一个树桩的数据结构，将他转变为SQL的过程包括遍历他的子节点，调用他们的as_sql方法，生成最终SQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;queryset&#34;&gt;QuerySet&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;django.db.models.query.QuerySet&lt;/li&gt;
&lt;li&gt;Query实例的高层封装，提供用户使用的API&lt;/li&gt;
&lt;li&gt;同时相当于一个查询到的记录集合的容器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;managers&#34;&gt;Managers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;django.db.models.manager.Manager&lt;/li&gt;
&lt;li&gt;Model.objects.xxx&lt;/li&gt;
&lt;li&gt;get_queryset()为当前model返回一个QuerySet, Model.objects.xxx &amp;ndash;&amp;gt; queryset.xxx&lt;/li&gt;
&lt;li&gt;do some custom&amp;hellip;
&lt;figure style=&#34;flex-grow: 172; flex-basis: 414px&#34;&gt;
		&lt;a href=&#34;https://hukx.site/posts/description-of-django-orm/2018-10-08-15-38-40.png&#34; data-size=&#34;594x344&#34;&gt;&lt;img src=&#34;https://hukx.site/posts/description-of-django-orm/2018-10-08-15-38-40.png&#34;
				srcset=&#34;https://hukx.site/posts/description-of-django-orm/2018-10-08-15-38-40_hu6e6adc06cb1f69b9af217120dbe637fe_314836_480x0_resize_box_2.png 480w, https://hukx.site/posts/description-of-django-orm/2018-10-08-15-38-40_hu6e6adc06cb1f69b9af217120dbe637fe_314836_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;594&#34;
				height=&#34;344&#34;
				loading=&#34;lazy&#34;
				&gt;
		&lt;/a&gt;
		
	&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;models&#34;&gt;Models&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;the actual representation of the data and associated logic&lt;/li&gt;
&lt;li&gt;一个Model类对应数据库中的一张表，model的每个field对应数据表中的一列&lt;/li&gt;
&lt;li&gt;ModelBases: 所有model的元类&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>图解 Docker 虚拟化</title>
        <link>https://hukx.site/posts/docker-virtual/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://hukx.site/posts/docker-virtual/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
